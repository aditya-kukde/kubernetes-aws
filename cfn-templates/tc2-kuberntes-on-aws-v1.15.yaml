AWSTemplateFormatVersion: '2010-09-09'
Description: '
  Kubernetes CFN stack with KOPS,
  Single AZ Bastion (self-healing by CloudWatch) (EIP),
  Single AZ K8s Mastser (self-healing by ASG),
  Single AWS NAT Gateway Instance (EIP),
  Multi AZ Automatic AutoScaled  K8s Nodes,
  Private Multi-AZ VPC,
  AWS EFS,
  Copyright Tamas Tobi / Total Cloud Consulting @ 2019'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: AWS VPC Configuration
      Parameters:
      - VPCIPv4CIDRBlock
      - AdminIngressLocation
    - Label:
        default: AWS EC2 / Kubernetes Configuration
      Parameters:
      - InstallKubernetesIntoVPC
      - Ec2KeyPairName
      - Ec2BastionInstanceType
      - Ec2K8sMasterInstanceType
      - Ec2K8sNodeInstanceType
      - Ec2K8sNodeCapacityMin
      - Ec2K8sNodeCapacityMax
      - Ec2EBSK8sDiskSizeGb
      - S3BootstrapBucketName
      - S3BootstrapBucketPrefix
      - Ec2K8sAMIOsType
    - Label:
        default: Kubernetes Add-Ons, Configuration
      Parameters:
      - KubernetesAPIPublicAccess
      - KubernetesClusterAutoscaler
      - KubernetesDashboard
      - KubernetesALBIngressController
      - KubernetesExternalDNSPlugin
      - KubernetesExternalDNSName
      - KubernetesExternalDNSTXTSelector
      - KubernetesDashboardUsername
      - KubernetesDashboardPassword
      - KOPSReleaseVersion
      - KUBECTLReleaseVersion
      - HELMReleaseVersion
    - Label:
        default: Bastion Host OpenVPN Configuration
      Parameters:
      - VPNInstallOpenVPN
      - VPNNumberOfPreGeneratedCerts

    ParameterLabels:
      VPCIPv4CIDRBlock:
        default: Creates a new VPC with defined CIDR block
      AdminIngressLocation:
        default: Bastion Admin Host Ingress Allowed Location IPv4 range
      Ec2KeyPairName:
        default: Existing EC2 keypair name for instances
      Ec2BastionInstanceType:
        default: Bastion instance type
      Ec2K8sMasterInstanceType:
        default: K8s Master Instances Type
      Ec2K8sNodeInstanceType:
        default: K8s Nodes Instances Type
      Ec2K8sNodeCapacityMin:
        default: K8s AutoScaling MINIMUM Node Number
      Ec2K8sNodeCapacityMax:
        default: K8s AutoScaling MAXIMUM Node Number (If Autoscaling Plugin enabled!)
      Ec2EBSK8sDiskSizeGb:
        default: K8s Instances Disk Size (GB)
      S3BootstrapBucketName:
        default: S3 bucket NAME for Bootstrap Files (Bastion, K8s, KOPS, Kubernetes)
      S3BootstrapBucketPrefix:
        default: S3 key prefix for Bootstrap Files (Bastion, K8s, KOPS, Kubernetes)
      Ec2K8sAMIOsType:
        default: K8s Operation System type for Master / Nodes
      VPNNumberOfPreGeneratedCerts:
        default: Number of required pre-generated VPN connection certificates
      KubernetesClusterAutoscaler:
        default: Install Kubernetes Cluster Autoscaler
      KubernetesDashboard:
        default: Install Kubernetes Dashboard
      VPNInstallOpenVPN:
        default: Install and configure OpenVPN server on Bastion host
      KubernetesAPIPublicAccess:
        default: "Public Internet Kubernetes API acess via HTTPS"
      KubernetesALBIngressController:
        default: "Install CoreOS alb-ingress-controller plugin"
      InstallKubernetesIntoVPC:
        default: "Install Kubernetes via KOPS into the newly created VPC"
      KubernetesExternalDNSPlugin:
        default: "Install external DNS plugin for ALB ingress controller"
      KubernetesExternalDNSName:
        default: "External DNS plugin: ALB managed DNS domain name (e.g.: example.com)"
      KubernetesExternalDNSTXTSelector:
        default: "External DNS TXT record selector ID"
      KubernetesDashboardUsername:
        default: "Kubernetes Dashboard: HTTP auth username"
      KubernetesDashboardPassword:
        default: "Kubernetes Dashboard: HTTP auth password"
      KOPSReleaseVersion:
        default: "KOPS relese version number"
      KUBECTLReleaseVersion:
        default: "KUBECTL release version number"
      HELMReleaseVersion:
        default: "HELM release version number"

Parameters:
  VPCIPv4CIDRBlock:
    Description: /16. Create a new VPC with a CIDR block.
    Type: String
    Default: 10.201.0.0
    AllowedValues:
      - 10.201.0.0
      - 10.202.0.0
      - 10.203.0.0
      - 10.204.0.0
      - 10.205.0.0
    ConstraintDescription: '/16. must be a valid, not existing IPv4 CIDR block.'

  AdminIngressLocation:
    Description: CIDR block (IP address range) to allow SSH/VPN access to the 
      bastion host. Use 0.0.0.0/0 to allow access from all locations.
    Type: String
    Default: '0.0.0.0/0'
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IPv4 CIDR range of the form x.x.x.x/x.

  Ec2KeyPairName:
    Description: Existing EC2 KeyPair for SSH access on Bastion host.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  Ec2BastionInstanceType:
    Description: EC2 type for the Bastion instance.
    Type: String
    Default: t3.micro
    AllowedValues:
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m5.large
    - m5.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    
  Ec2K8sMasterInstanceType:
    Description: EC2 type for the K8s Master instance(s).
    Type: String
    Default: t3.small
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t3.small
    - t3.medium
    - t3.large
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c4.large
    - c4.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  Ec2K8sNodeInstanceType:
    Description: EC2 type for the K8s Node instance(s).
    Type: String
    Default: t3.small
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t3.small
    - t3.medium
    - t3.large
    - m4.large
    - m4.xlarge
    - m5.large
    - m5.xlarge
    - c4.large
    - c4.xlarge
    - c5.large
    - c5.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  Ec2K8sNodeCapacityMin:
    Default: '1'
    Description: The initial number of Kubernetes Node Instances
    Type: Number
    MinValue: '1'
    MaxValue: '10'
    ConstraintDescription: must be between 1 and 10 EC2 instances.
    
  Ec2K8sNodeCapacityMax:
    Default: '20'
    Description: The MAXIMUM number of Kubernetes Node Instances
    Type: Number
    MinValue: '1'
    MaxValue: '50'
    ConstraintDescription: must be between 1 and 10 EC2 instances.

  Ec2EBSK8sDiskSizeGb:
    Description: 'Size of the root disk for the K8s EC2 instances, in GiB.  Default: 50'
    Default: 50
    Type: Number
    MinValue: 40
    MaxValue: 1024

  S3BootstrapBucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Bootstrap S3 bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).

    Default: tc2-demo-kubernetes-bootstrap
    Description: Bootstrap Scripts in S3 for K8s cluster creation
    Type: String
  
  S3BootstrapBucketPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$"
    ConstraintDescription: Bootstrap S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/). It cannot start or end
      with forward slash (/) because they are automatically appended.
    Default: latest
    Description: Folder (key) path within bootstrap S3 bucket
    Type: String


  Ec2K8sAMIOsType:
    Description: Host Operating System Type for Kubernets cluster instances
    Type: String
    Default: AmazonLinux2
    AllowedValues:
    - AmazonLinux2
    - Ubuntu-1804-LTS
    ConstraintDescription: must be a valid OS type.
    
  VPNNumberOfPreGeneratedCerts:
    Description: Number of pre-generated OpenVPN certificates
    Default: 5
    Type: Number
    MinValue: 1
    MaxValue: 25
    
  KubernetesClusterAutoscaler:
    Description: >-
      Kubernetes Cluster Autoscaler plugin: https://github.com/kubernetes/autoscaler
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    
  KubernetesDashboard:
    Description: >-
      Kubernetes Dashboard plugin: https://github.com/kubernetes/dashboard
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  VPNInstallOpenVPN:
    Description: >-
      Install and auto-configure OpenVPN: https://github.com/tatobi/easy-openvpn
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
      
  KubernetesAPIPublicAccess:
    Description: If true, Kubernetes cluster API endpoint is publicly available, otherwise only from Bastion host / VPN / SSH.
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  KubernetesALBIngressController:
    Description: If true, install ALB ingress controller.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  
  InstallKubernetesIntoVPC:
    Description: If true, install Kubernetes cluster via KOPS into the newly created VPC.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  KubernetesExternalDNSPlugin:
    Description: If true, DNS external login is installed.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  KubernetesExternalDNSName:
    Description: Name of the ALB managed DNS domain
    Type: String
    ConstraintDescription: DNS Name can include numbers, lowercase
      letters, uppercase letters, dot(.), and hyphens (-). It cannot start or end with a hyphen (-).
      
  KubernetesExternalDNSTXTSelector:
    Description: ALB managed DNS domain record TXT selector
    Type: String
    MinLength: '3'
    Default: 'abcdefghijk'
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z]*[0-9a-zA-Z])*$"
    ConstraintDescription: "ALB: DNS TXT record selector ID can include numbers, lowercase
      letters, uppercase letters. TXT domain record example: (e.g.: example.io IN TXT heritage=external-dns,external-dns/owner=uN3roowak7yeipuz)"
      
  KubernetesDashboardUsername:
    Description: Kubernetes Dashboard auth username
    Type: String
    MinLength: '6'
    Default: 'kubernetes'
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$"
    ConstraintDescription: HTTP auth username.

  KubernetesDashboardPassword:
    Description: Kubernetes Dashboard auth password
    Type: String
    MinLength: '12'
    Default: 'abcdefgh123456'
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$"
    ConstraintDescription: HTTP auth password.
    
  KOPSReleaseVersion:
    MinLength: 3
    Default: '1.11.1'
    Description: KOPS release version
    Type: String
    AllowedValues:
      - '1.11.1'
    
  KUBECTLReleaseVersion:
    MinLength: 3
    Default: '1.11.8'
    Description: kubectl release version
    Type: String
    AllowedValues:
      - '1.11.7'
      - '1.11.8'

  HELMReleaseVersion:
    MinLength: 3
    Default: '2.13.0'
    Description: helm release version
    Type: String
    AllowedValues:
      - '2.13.0'


Mappings:
  SubnetConfig:
    10.201.0.0:
      Subnet1CIDR: 10.201.0.0/20
      Subnet2CIDR: 10.201.16.0/20
      Subnet3CIDR: 10.201.32.0/20
      Subnet4CIDR: 10.201.48.0/20
      Subnet5CIDR: 10.201.64.0/20
      Subnet6CIDR: 10.201.80.0/20
    10.202.0.0:
      Subnet1CIDR: 10.202.0.0/20
      Subnet2CIDR: 10.202.16.0/20
      Subnet3CIDR: 10.202.32.0/20
      Subnet4CIDR: 10.202.48.0/20
      Subnet5CIDR: 10.202.64.0/20
      Subnet6CIDR: 10.202.80.0/20
    10.203.0.0:
      Subnet1CIDR: 10.203.0.0/20
      Subnet2CIDR: 10.203.16.0/20
      Subnet3CIDR: 10.203.32.0/20
      Subnet4CIDR: 10.203.48.0/20
      Subnet5CIDR: 10.203.64.0/20
      Subnet6CIDR: 10.203.80.0/20
    10.204.0.0:
      Subnet1CIDR: 10.204.0.0/20
      Subnet2CIDR: 10.204.16.0/20
      Subnet3CIDR: 10.204.32.0/20
      Subnet4CIDR: 10.204.48.0/20
      Subnet5CIDR: 10.204.64.0/20
      Subnet6CIDR: 10.204.80.0/20
    10.205.0.0:
      Subnet1CIDR: 10.205.0.0/20
      Subnet2CIDR: 10.205.16.0/20
      Subnet3CIDR: 10.205.32.0/20
      Subnet4CIDR: 10.205.48.0/20
      Subnet5CIDR: 10.205.64.0/20
      Subnet6CIDR: 10.205.80.0/20
  
  AWSRegion2AZ:
    eu-central-1:
      Name: Frankfurt
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    eu-west-1:
      Name: Ireland
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    eu-west-2:
      Name: London
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    eu-west-3:
      Name: Paris
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    us-east-1:
      Name: N. Virgina
      NumAZs: '6'
      AZ0: '3'
      AZ1: '4'
      AZ2: '5'
    us-east-2:
      Name: Ohio
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    us-west-1:
      Name: N. California
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    us-west-2:
      Name: Oregon
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    ap-south-1:
      Name: Mumbai
      NumAZs: '2'
      AZ0: '0'
      AZ1: '1'
      AZ2: '0'
    ap-northeast-2:
      Name: Seoul
      NumAZs: '2'
      AZ0: '0'
      AZ1: '1'
      AZ2: '0'
    ap-southeast-1:
      Name: Singapore
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    ap-southeast-2:
      Name: Sydney
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    ap-northeast-1:
      Name: Tokyo
      NumAZs: '4'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    sa-east-1:
      Name: Sao Paulo
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'
    ca-central-1:
      Name: Canada Central
      NumAZs: '2'
      AZ0: '0'
      AZ1: '1'
      AZ2: '0'
    eu-north-1:
      Name: Stockholm
      NumAZs: '3'
      AZ0: '0'
      AZ1: '1'
      AZ2: '2'


Resources:
########################################################
# Networking Configuration
########################################################

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub "${VPCIPv4CIDRBlock}/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} VPC"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
  
  PublicSubnet1:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - !Ref VPCIPv4CIDRBlock
        - Subnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - !FindInMap 
          - AWSRegion2AZ
          - !Ref 'AWS::Region'
          - AZ0
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} publicsubnet1"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
      - Key: kubernetes.io/role/alb-ingress
        Value: ''
    
  PublicSubnet2:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - !Ref VPCIPv4CIDRBlock
        - Subnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - !FindInMap 
          - AWSRegion2AZ
          - !Ref 'AWS::Region'
          - AZ1
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} publicsubnet2"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
      - Key: kubernetes.io/role/alb-ingress
        Value: ''
        
  PublicSubnet3:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - !Ref VPCIPv4CIDRBlock
        - Subnet3CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - !FindInMap 
          - AWSRegion2AZ
          - !Ref 'AWS::Region'
          - AZ2
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} publicsubnet3"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
      - Key: kubernetes.io/role/alb-ingress
        Value: ''

  PrivateSubnet1:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - !Ref VPCIPv4CIDRBlock
        - Subnet4CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - !FindInMap 
          - AWSRegion2AZ
          - !Ref 'AWS::Region'
          - AZ1
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} privatesubnet1"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
          
  PrivateSubnet2:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - !Ref VPCIPv4CIDRBlock
        - Subnet5CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - !FindInMap 
          - AWSRegion2AZ
          - !Ref 'AWS::Region'
          - AZ2
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} privatesubnet2"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
        
  PrivateSubnet3:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - !Ref VPCIPv4CIDRBlock
        - Subnet6CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - !FindInMap 
          - AWSRegion2AZ
          - !Ref 'AWS::Region'
          - AZ0
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} privatesubnet3"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName

  InternetGateway:
    DependsOn:
      - VPC
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} InternetGateway"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
  
  GatewayToVPCAssociation:
    DependsOn:
      - VPC
      - InternetGateway
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    DependsOn:
      - VPC
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} PublicRouteTable"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
    
  PublicRoute:
    DependsOn:
      - PublicRouteTable
      - InternetGateway
      - GatewayToVPCAssociation
      - VPC
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  
  PublicSubnetRouteTableAssociation1:
    DependsOn:
      - PublicSubnet1
      - PublicRouteTable
      - VPC
      - PublicRoute
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  
  PublicSubnetRouteTableAssociation2:
    DependsOn:
      - PublicSubnet2
      - PublicRouteTable
      - VPC
      - PublicRoute
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetRouteTableAssociation3:
    DependsOn:
      - PublicSubnet3
      - PublicRouteTable
      - VPC
      - PublicRoute
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    DependsOn:
      - VPC
      - PrivateSubnet1
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} PrivateRouteTable1"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
    
      
  PrivateRouteTable2:
    DependsOn:
      - VPC
      - PrivateSubnet2
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} PrivateRouteTable2"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName

  PrivateRouteTable3:
    DependsOn:
      - VPC
      - PrivateSubnet3
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} PrivateRouteTable3"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
  
  PrivateSubnetRouteTableAssociation1:
    DependsOn:
      - PrivateRouteTable1
      - PrivateSubnet1
      - VPC
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  
  PrivateSubnetRouteTableAssociation2:
    DependsOn:
      - PrivateRouteTable2
      - PrivateSubnet2
      - VPC
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
      
  PrivateSubnetRouteTableAssociation3:
    DependsOn:
      - PrivateRouteTable3
      - PrivateSubnet3
      - VPC
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3
  
  BastionSecurityGroup:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AdminIngressLocation
        - IpProtocol: udp
          FromPort: '1194'
          ToPort: '1194'
          CidrIp: !Ref AdminIngressLocation
        - IpProtocol: udp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref AdminIngressLocation
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Sub "${VPCIPv4CIDRBlock}/16"
      VpcId: !Ref VPC
      GroupDescription: Bastion Instance Security Group
      GroupName : !Sub "${AWS::StackName} BastionSecurityGroup"
  
  K8sMasterAndNodeSecurityGroup:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Sub "${VPCIPv4CIDRBlock}/16"
      VpcId: !Ref VPC
      GroupDescription: Kubernetes Istances Security Group
      GroupName : !Sub "${AWS::StackName} Master And Node"
  
  VPCEndPointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    DependsOn:
      - VPC
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
      - PublicSubnetRouteTableAssociation1
      - PublicSubnetRouteTableAssociation2
      - PublicSubnetRouteTableAssociation3
      - PublicRouteTable
      - PrivateRouteTable1
      - PrivateRouteTable2
      - PrivateRouteTable3
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
        - !Ref PrivateRouteTable3
      ServiceName: !Join  
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref VPC
  
  VPCEndPointDynamoDB:
    Type: 'AWS::EC2::VPCEndpoint'
    DependsOn:
      - VPC
      - PublicSubnet1
      - PublicSubnet2
      - PublicSubnet3
      - PublicSubnetRouteTableAssociation1
      - PublicSubnetRouteTableAssociation2
      - PublicSubnetRouteTableAssociation3
      - PublicRouteTable
      - VPCEndPointS3
      - PrivateRouteTable1
      - PrivateRouteTable2
      - PrivateRouteTable3
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
        - !Ref PrivateRouteTable3
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .dynamodb
      VpcId: !Ref VPC
  

########################################################
# Dynamically determine local Ubuntu AMI for bastion 
# With Lambda
########################################################
  LambdaGetAMIImagesRole:
    Type: "AWS::IAM::Role"
    DependsOn:
      - VPC
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            - ec2:Describe*
            Resource: "*"

  LambdaGetAmiImagesForBastion:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaGetAMIImagesRole
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import cfnresponse

          AMI_VENDOR_STRING="ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server*"

          def GetLatestAMIID():
            EC2 = boto3.client('ec2', region_name="${AWS::Region}")
            response = EC2.describe_images(
                Owners=['099720109477'],
                Filters=[
                  {'Name': 'name', 'Values': [AMI_VENDOR_STRING]},
                  {'Name': 'architecture', 'Values': ['x86_64']},
                  {'Name': 'root-device-type', 'Values': ['ebs']},
                ],
            )

            amis = sorted(response['Images'],
                          key=lambda x: x['CreationDate'],
                          reverse=True)
            print(amis[0]['ImageId'])
            return format(amis[0]['ImageId'])
          
          def handler(event, context):
            if event['RequestType'] == 'Delete':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return
            try:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, { 'Id': GetLatestAMIID() })
              return
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, { 'Error': format(e) })
              return
          
      Handler: "index.handler"
      Runtime: "python3.6"
      Timeout: "300"
      Role: !GetAtt LambdaGetAMIImagesRole.Arn

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt LambdaGetAmiImagesForBastion.Arn
      Region: !Ref "AWS::Region"


########################################################
# Bastion Configuration
# keep bastion here because
# for testing Bastion acts as
# the NAT
########################################################

#create role
  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: S3FullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 's3:*'
              Resource: '*'
      - PolicyName: EC2FullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 'ec2:*'
              Resource: '*'
            - Effect: Allow
              Action: 'ssm:*'
              Resource: '*'
            - Effect: Allow
              Action: 'ec2messages:*'
              Resource: '*'
            - Effect: Allow
              Action: 'elasticloadbalancing:*'
              Resource: '*'
            - Effect: Allow
              Action: 'cloudwatch:*'
              Resource: '*'
            - Effect: Allow
              Action: 'autoscaling:*'
              Resource: '*'
      - PolicyName: IAMFullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 'iam:*'
              Resource: '*'
      - PolicyName: CodeDeployFullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 'tag:*'
              Resource: '*'
            - Effect: Allow
              Action: 'codedeploy:*'
              Resource: '*'
      - PolicyName: R53FullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 
              - 'route53:*'
              - 'route53domains:*'
              - 'cloudfront:ListDistributions'
              - 'elasticbeanstalk:DescribeEnvironments'
              - 'sns:ListTopics'
              - 'sns:ListSubscriptionsByTopic'
              Resource: '*'
      - PolicyName: LogsFullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 'logs:*'
              Resource: '*'
      - PolicyName: ECRFullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 'ecr:*'
              Resource: '*'
      - PolicyName: KMSFullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 'kms:*'
              Resource: '*'
      - PolicyName: SSMFullAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: 'ssm:*'
              Resource: '*'
            - Effect: Allow
              Action: 'ssmmessages:*'
              Resource: '*'
            - Effect: Allow
              Action: 'ds:*'
              Resource: '*'
  
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref BastionRole

  BastionElasticIP:
    Type: 'AWS::EC2::EIP'
    DependsOn:
      - VPC
    Properties:
      Domain: vpc

  KubernetesEFS:
    Type: "AWS::EFS::FileSystem"
    DependsOn:
    - VPC
    - PrivateSubnet1
    - PrivateSubnet2
    - PrivateSubnet3
    Properties: 
      Encrypted: false
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName} EFS"
      - Key: KubernetesEFS
        Value: !Ref AWS::StackName

  KubernetesEFSTarget1:
    Type: "AWS::EFS::MountTarget"
    DependsOn:
    - VPC
    - KubernetesEFS
    - K8sMasterAndNodeSecurityGroup
    - PrivateSubnet1
    Properties:
      FileSystemId: !Ref KubernetesEFS
      SecurityGroups:
        - !Ref K8sMasterAndNodeSecurityGroup
      SubnetId: !Ref PrivateSubnet1
  
  KubernetesEFSTarget2:
    Type: "AWS::EFS::MountTarget"
    DependsOn:
    - VPC
    - KubernetesEFS
    - K8sMasterAndNodeSecurityGroup
    - PrivateSubnet2
    Properties:
      FileSystemId: !Ref KubernetesEFS
      SecurityGroups:
        - !Ref K8sMasterAndNodeSecurityGroup
      SubnetId: !Ref PrivateSubnet2

  KubernetesEFSTarget3:
    Type: "AWS::EFS::MountTarget"
    DependsOn:
    - VPC
    - KubernetesEFS
    - K8sMasterAndNodeSecurityGroup
    - PrivateSubnet3
    Properties:
      FileSystemId: !Ref KubernetesEFS
      SecurityGroups:
        - !Ref K8sMasterAndNodeSecurityGroup
      SubnetId: !Ref PrivateSubnet3


  BastionHost:
    Type: AWS::EC2::Instance
    DependsOn: 
    - BastionInstanceProfile
    - VPC
    - BastionSecurityGroup
    - PublicSubnetRouteTableAssociation1
    - PublicSubnetRouteTableAssociation2
    - PublicSubnetRouteTableAssociation3
    - PrivateSubnetRouteTableAssociation1
    - PrivateSubnetRouteTableAssociation2
    - PrivateSubnetRouteTableAssociation3
    - PrivateRouteTable1
    - PrivateRouteTable2
    - PrivateRouteTable3
    - VPCEndPointS3
    - VPCEndPointDynamoDB
    - BastionElasticIP
    - KubernetesEFS
    - KubernetesEFSTarget1
    - KubernetesEFSTarget2
    - KubernetesEFSTarget3
    - LambdaGetAmiImagesForBastion
    - AMIInfo
    Properties:
      ImageId: !GetAtt AMIInfo.Id
      InstanceType: !Ref Ec2BastionInstanceType
      SourceDestCheck: false
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: 0
        SubnetId: !Ref PublicSubnet1
        GroupSet:
        - Ref: BastionSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName} bastion host"
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
      - Key: K8sBastionNumber
        Value: K8sBastion-01
      KeyName: !Ref Ec2KeyPairName
      IamInstanceProfile: !Ref BastionInstanceProfile
      BlockDeviceMappings:
      - DeviceName: '/dev/sda1'
        Ebs:
          VolumeSize: 16
          VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          apt-get update
          apt-get -y install python-setuptools python-pip openvpn mc zip git ruby wget nfs-common
          pip install awscli boto boto3
          wget -O cfn-init.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          pip install cfn-init.tar.gz
          
          #install AWS SSM agent
          if [[ ! -n `ps axu | grep amazon-ssm-agent | grep -v grep` ]];
          then
            mkdir -p /tmp/ssm
            cd /tmp/ssm
            wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
            dpkg -i amazon-ssm-agent.deb
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent
          fi
          
          #install AWS CodeDeploy agent
          wget https://aws-codedeploy-eu-west-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          systemctl enable codedeploy-agent
          systemctl start codedeploy-agent
          systemctl status codedeploy-agent
          
          #swap
          dd if=/dev/zero of=/swapfile count=1024 bs=1MiB
          mkswap /swapfile
          chmod 600 /swapfile
          swapon /swapfile
          echo "/swapfile    none    swap    sw    0   0" | tee --append /etc/fstab
          echo "vm.swappiness=10" | tee --append /etc/sysctl.conf
          echo "vm.vfs_cache_pressure=50" | tee --append /etc/sysctl.conf
          sysctl -p
          
          touch /tmp/init-kops.log
          
          #update snap packages
          snap refresh > /dev/null 2>&1
          
          #start cfn service
          /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource BastionHost --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BastionHost --region ${AWS::Region}
          
          EIP_LIST=${BastionElasticIP}
          CLOUDWATCHGROUP=${AWS::StackName}-bastion-logs
    
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: 
          - config-cfn-hup
        config-cfn-hup:
          files:
            #cfn-hup configuration 
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BastionHost.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource BastionHost --region ${AWS::Region}
            #systemd service 
            '/etc/systemd/system/cfn-hup.service': 
              content: |
                [Unit]
                Description=Cloud formation helper daemon

                [Service]
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always
                Type=simple

                [Install]
                WantedBy=multi-user.target
            
            
            '/opt/bastion-init-host.sh':
              mode: '000755'
              owner: "root"
              group: "root"
              content: !Sub |
                #!/bin/bash
                
                cd /opt
                mkdir -p /opt/bastion-init
                cd /opt/bastion-init
                
                #create routes in private rourte tables
                instance_id=`curl http://169.254.169.254/latest/meta-data/instance-id`
                
                aws ec2 create-route --destination-cidr-block 0.0.0.0/0 --instance-id $instance_id --route-table-id ${PrivateRouteTable1} --region ${AWS::Region}
                aws ec2 create-route --destination-cidr-block 0.0.0.0/0 --instance-id $instance_id --route-table-id ${PrivateRouteTable2} --region ${AWS::Region}
                aws ec2 create-route --destination-cidr-block 0.0.0.0/0 --instance-id $instance_id --route-table-id ${PrivateRouteTable3} --region ${AWS::Region}
                
                #sync bootstrap scripts from s3
                aws s3 sync s3://${S3BootstrapBucketName}/${S3BootstrapBucketPrefix}/bootstrap/ ./ --region ${AWS::Region} --quiet
                
                chmod +x ./*.sh
                chmod +x ./*.py
                ./01-init-bastion-host.sh "${S3BootstrapBucketName}" \
                 "${S3BootstrapBucketPrefix}" \
                 "${AWS::Region}" \
                 "${VPCIPv4CIDRBlock}/16"
                 
                exit 0

            '/opt/bastion-init-internal-dns.sh':
              mode: '000755'
              owner: "root"
              group: "root"
              content: !Sub |
                #!/bin/bash
                
                mkdir -p /opt/kops-state
                mkdir -p /opt/kops-config
                cd /opt/bastion-init
                
                ./02-init-internal-dns.sh ${AWS::Region} ${VPC} "${KubernetesAPIPublicAccess}" ${AWS::StackName}
                exit 0

            '/opt/bastion-init-openvpn.sh':
              mode: '000755'
              owner: "root"
              group: "root"
              content: !Sub |
                #!/bin/bash
                
                if [[ "${VPNInstallOpenVPN}" == "false" ]]; 
                then
                  echo "OpenVPN installation does not selected."
                  exit 0
                fi
                
                cd /opt
                mkdir -p /opt/openvpn-keys
                mkdir -p /opt/easy-openvpn
                cd /opt/bastion-init
                
                aws s3 sync s3://${S3BootstrapBucketName}/${S3BootstrapBucketPrefix}/easy-openvpn/ /opt/easy-openvpn/ --region ${AWS::Region} --quiet

                ./03-init-openvpn.sh "${VPCIPv4CIDRBlock}" "EU" "${AWS::StackName}" "${AWS::StackName}" "${AWS::StackName}" "Email" "OU" ${VPNNumberOfPreGeneratedCerts} "${AWS::StackName}-V2" ""
                exit 0

            '/opt/bastion-init-efs.sh':
              mode: '000755'
              owner: "root"
              group: "root"
              content: !Sub |
                #!/bin/bash
                
                #mount efs
                mkdir -p /mnt/efs
                chmod 777 /mnt/efs
                mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${KubernetesEFS}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
                
                
                chown -R ubuntu:www-data /mnt/efs
                chmod -R 777 /mnt/efs
                chmod -R og+rwXs /mnt/efs
                
                echo "${KubernetesEFS}.efs.${AWS::Region}.amazonaws.com:/  /mnt/efs nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,_netdev,noresvport 0 0" | tee --append /etc/fstab
                
                exit 0


            '/opt/bastion-init-kops.sh':
              mode: '000755'
              owner: "root"
              group: "root"
              content: !Sub |
                #!/bin/bash

                cd /opt
                mkdir -p /opt/kops-state
                mkdir -p /opt/kops-config
                cd /opt/bastion-init
                
                if [[ "${InstallKubernetesIntoVPC}" == "false" ]]; 
                then
                  echo "Kubernetes cluster installation does not selected."
                  exit 0
                fi
                
                self_ami_id=""
                #self_ami_id=`curl http://169.254.169.254/latest/meta-data/ami-id`
                
                ./04-init-kops.sh "${AWS::Region}" \
                  "${AWS::StackName}" \
                  "${Ec2K8sMasterInstanceType}" \
                  "${Ec2K8sNodeInstanceType}" \
                  "${Ec2K8sNodeCapacityMin}" \
                  "${Ec2K8sNodeCapacityMax}" \
                  "${Ec2EBSK8sDiskSizeGb}" \
                  "${Ec2K8sAMIOsType}" \
                  "false" \
                  "${VPC}" \
                  "${VPCIPv4CIDRBlock}/16" \
                  "${PrivateSubnet1}" \
                  "${PrivateSubnet2}" \
                  "${PrivateSubnet3}" \
                  "${PublicSubnet1}" \
                  "${PublicSubnet2}" \
                  "${PublicSubnet3}" \
                  "${K8sMasterAndNodeSecurityGroup}" \
                  "${S3BootstrapBucketName}" \
                  "${S3BootstrapBucketPrefix}" \
                  "${KubernetesDashboard}" \
                  "${KubernetesALBIngressController}" \
                  "${KubernetesClusterAutoscaler}" \
                  "${KubernetesAPIPublicAccess}" \
                  "${KubernetesExternalDNSPlugin}" \
                  "${KubernetesExternalDNSName}" \
                  "${KubernetesExternalDNSTXTSelector}" \
                  "${KOPSReleaseVersion}" \
                  "${KUBECTLReleaseVersion}" \
                  "${HELMReleaseVersion}" \
                  "$self_ami_id"
                  
                exit 0
                
            '/opt/bastion-init-dashboard.sh':
              mode: '000755'
              owner: "root"
              group: "root"
              content: !Sub |
                #!/bin/bash

                cd /opt/bastion-init
                
                if [[ "${InstallKubernetesIntoVPC}" == "false" ]]; 
                then
                  echo "Kubernetes cluster installation does not selected."
                  exit 0
                fi
                
                if [[ "${KubernetesDashboard}" == "false" ]]; 
                then
                  echo "Skip kubernetes dashboard."
                  exit 0
                fi
                
                ./05-init-kubernetes-dashboard.sh "${KubernetesDashboardUsername}" "${KubernetesDashboardPassword}"

                exit 0
            
            '/opt/bastion-init-finish.sh':
              mode: '000755'
              owner: "root"
              group: "root"
              content: !Sub |
                #!/bin/bash
                
                chown -R ubuntu:ubuntu /opt
                chmod -R og+rX /opt
                
                chown -R ubuntu:ubuntu /home/ubuntu
                exit 0
                
            '/opt/delete-kops-cluster.sh':
              mode: '000755'
              owner: "root"
              group: "root"
              content: !Sub |
                #!/bin/bash
                
                cd /opt/bastion-init
                ./tear-down-cluster.sh ${AWS::Region} >> /tmp/init-kops.log 2>&1
          
          commands:
            "00-enable-cfn-hup":
              command: "systemctl enable cfn-hup.service"
            "01-start-cfn-hup":
              command: "systemctl start cfn-hup.service" 
            "02-init-bastion-host":
              command: "/opt/bastion-init-host.sh >> /tmp/init-kops.log 2>&1"
            "03-init-internal-dns.sh":
              command: "/opt/bastion-init-internal-dns.sh >> /tmp/init-kops.log 2>&1"
            "04-init-openvpn":
              command: "/opt/bastion-init-openvpn.sh >> /tmp/init-kops.log 2>&1"
            "05-init-efs":
              command: "/opt/bastion-init-efs.sh >> /tmp/init-kops.log 2>&1"
            "06-init-kops":
              command: "/opt/bastion-init-kops.sh >> /tmp/init-kops.log 2>&1"
            "07-init-dashboard":
              command: "/opt/bastion-init-dashboard.sh >> /tmp/init-kops.log 2>&1"
            "08-init-finish":
              command: "/opt/bastion-init-finish.sh"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M


  # If the Bastion node is unresponsive for 5 minutes, AWS will attempt to recover it
  BastionRecoveryTestAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - PublicSubnet1
      - PublicRouteTable
      - VPC
      - PublicRoute
      - BastionHost
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 10
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      # 300-second periods (5 minute)
      Period: '300'
      # 5-minute check-ins
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      # This is the call that actually tries to recover the instance
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
      # Applies this alarm to our K8sMasterInstance
      Dimensions:
      - Name: InstanceId
        Value: !Ref BastionHost
        
###############################################
# Lambda function for graceful tear-down of KOPS by AWS SSM
###############################################
  LambdaGracefulTearDownRole:
    Type: "AWS::IAM::Role"
    DependsOn:
      - VPC
      - BastionHost
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ["lambda.amazonaws.com"]
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "lambda_ssm_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: "Allow"
            Action:
              - 'ssm:DescribeAssociation'
              - 'ssm:GetDeployablePatchSnapshotForInstance'
              - 'ssm:GetCommandInvocation'
              - 'ssm:GetDocument'
              - 'ssm:GetManifest'
              - 'ssm:GetParameters'
              - 'ssm:ListAssociations'
              - 'ssm:ListInstanceAssociations'
              - 'ssm:PutInventory'
              - 'ssm:PutComplianceItems'
              - 'ssm:PutConfigurePackageResult'
              - 'ssm:UpdateAssociationStatus'
              - 'ssm:UpdateInstanceAssociationStatus'
              - 'ssm:UpdateInstanceInformation'
            Resource: "*"
          - Effect: "Allow"
            Action:
              - 'ssm:SendCommand'
            Resource: 
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${BastionHost}"
              - !Sub "arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript"
          - Effect: Allow
            Action:
              - 'ec2messages:AcknowledgeMessage'
              - 'ec2messages:DeleteMessage'
              - 'ec2messages:FailMessage'
              - 'ec2messages:GetEndpoint'
              - 'ec2messages:GetMessages'
              - 'ec2messages:SendReply'
            Resource: '*'
          - Effect: Allow
            Action: 's3:*'
            Resource: "*"
          - Effect: Allow
            Action:
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:RevokeSecurityGroupIngress'
              - 'ec2:AuthorizeSecurityGroupEgress'
              - 'ec2:RevokeSecurityGroupEgress'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVpcs'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeInternetGateways'
              - 'ec2:DescribeEgressOnlyInternetGateways'
              - 'ec2:DescribeNatGateways'
              - 'ec2:DescribeRouteTables'
              - 'ec2:DescribeAddresses'
              - 'ec2:DescribeNetworkAcls'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DescribeNetworkInterfaceAttribute'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DetachNetworkInterface'
              - 'ec2:ModifyNetworkInterfaceAttribute'
              - 'ec2:ResetNetworkInterfaceAttribute'
              - 'ec2:DeleteNetworkInterface'
            Resource: '*'


  # Lambda Function for graceful kops teardown
  LambdaGracefulTearDown:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - BastionHost
      - LambdaGracefulTearDownRole
    Properties:
      Code:
        ZipFile: !Sub |
          import sys
          import boto3
          import cfnresponse
          import time
          
          ssm_exit_statuses=['Success']
          ssm = boto3.client('ssm', region_name="${AWS::Region}")
          
          def ssm_del_k8scluster():
            instanceID="${BastionHost}"
            
            response = ssm.send_command(
                InstanceIds=[
                    instanceID
                ],
                DocumentName='AWS-RunShellScript',
                Comment='Graceful tear down Kubernetes / KOPS resources created in CFN template',
                Parameters={
                    'commands': [
                        '/opt/delete-kops-cluster.sh'
                    ]
                }
            )
            return response
          
          def handler(event, context):
            if event['RequestType'] == 'Delete':
              r=ssm_del_k8scluster()
              #print(r)
              print(time.ctime())
              commandID=r.get('Command').get('CommandId')
              print(commandID)
              time.sleep(5)
              for _ in range(80):
                  try:
                      response = ssm.get_command_invocation(
                          CommandId=commandID,
                          InstanceId=instanceID
                      )
                      ssm_status=response.get('Status')
                      print("-----")
                      print(ssm_status)
                      print(time.ctime())
                      if ssm_status in ssm_exit_statuses:
                         print("SSM Command Finished.")
                         break
                      time.sleep(3)
                  except Exception as e:
                      print(e)
                      time.sleep(3)
                      pass
              time.sleep(30)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return {"Delete":"OK"}
            if event['RequestType'] == 'Create':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              return {"Create":"OK"}
              
      Handler: "index.handler"
      Runtime: "python3.6"
      Timeout: "300"
      Role: !GetAtt LambdaGracefulTearDownRole.Arn

  # A Custom CFN resource that uses the lambda function to invoke SSM
  LambdaCustomResource:
    Type: "Custom::CustomResourceType"
    DependsOn:
      - BastionHost
      - LambdaGracefulTearDownRole
      - LambdaGracefulTearDown
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaGracefulTearDown.Arn
      

Outputs:
  VPCID:
    Value: !Ref VPC
    Description: Created VPC ID

  BastionHostPublicIp:
    Description: IP Address of the Bastion Host. Use SSH ubuntu@BastionIP to control the cluster.
    Value: !Sub ${BastionHost.PublicIp}

  KubectlAndKopsConfigs:
    Description: Get Kubernetes / KOPS configuartion to local machine. More in documentation.
    Value: !Sub >-
      SSH_KEY="path/to/${Ec2KeyPairName}";
      scp
      -i $SSH_KEY
      ubuntu@${BastionHost.PublicIp}:/opt/kops-state/KOPS_* ./
      
  OpenVPNConnectionConfigs:
    Description: Get Bastion Host OpenVPN configs / keys to local machine. More in documentation.(optional)
    Value: !Sub >-
      SSH_KEY="path/to/${Ec2KeyPairName}";
      scp
      -i $SSH_KEY
      ubuntu@${BastionHost.PublicIp}:/opt/openvpn-keys/* ./
      
  AWSEFSNFSMountPoint:
    Description: AWS EFS filesystem mount point
    Value: !Sub >-
      ${KubernetesEFS}.efs.${AWS::Region}.amazonaws.com
  
  BastionAWSLogs:
    Description: Get logs from Kubernetes Docker pods and bastion host bootstrap. (optional)
    Value: !Sub >-
      Bastionhost - ${AWS::StackName}-bastion-logs
      Dcoker containers - ${AWS::StackName}-kubernetes-logs

